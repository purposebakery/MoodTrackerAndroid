package com.techlung.moodtracker.greendao.generated;

import com.techlung.moodtracker.greendao.generated.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "MOOD_RATING".
 */
public class MoodRating {

    private Long id;
    private Integer rating;
    private Long scope;
    private java.util.Date day;
    private Long timestamp;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MoodRatingDao myDao;

    private MoodScope moodScope;
    private Long moodScope__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public MoodRating() {
    }

    public MoodRating(Long id) {
        this.id = id;
    }

    public MoodRating(Long id, Integer rating, Long scope, java.util.Date day, Long timestamp) {
        this.id = id;
        this.rating = rating;
        this.scope = scope;
        this.day = day;
        this.timestamp = timestamp;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMoodRatingDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getRating() {
        return rating;
    }

    public void setRating(Integer rating) {
        this.rating = rating;
    }

    public Long getScope() {
        return scope;
    }

    public void setScope(Long scope) {
        this.scope = scope;
    }

    public java.util.Date getDay() {
        return day;
    }

    public void setDay(java.util.Date day) {
        this.day = day;
    }

    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    /** To-one relationship, resolved on first access. */
    public MoodScope getMoodScope() {
        Long __key = this.scope;
        if (moodScope__resolvedKey == null || !moodScope__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoodScopeDao targetDao = daoSession.getMoodScopeDao();
            MoodScope moodScopeNew = targetDao.load(__key);
            synchronized (this) {
                moodScope = moodScopeNew;
            	moodScope__resolvedKey = __key;
            }
        }
        return moodScope;
    }

    public void setMoodScope(MoodScope moodScope) {
        synchronized (this) {
            this.moodScope = moodScope;
            scope = moodScope == null ? null : moodScope.getId();
            moodScope__resolvedKey = scope;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
